<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SecLinux Blog</title>
    <link>https://seclinux.net/</link>
    <description>Recent content on SecLinux Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Mar 2024 19:30:20 +0000</lastBuildDate><atom:link href="https://seclinux.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bindcompilation</title>
      <link>https://seclinux.net/posts/bindcompilation/</link>
      <pubDate>Sun, 31 Mar 2024 19:30:20 +0000</pubDate>
      
      <guid>https://seclinux.net/posts/bindcompilation/</guid>
      <description>Bind New Stable Compilation In this article I will document the process of compiling the new stable ISC BIND 9.20.01 from source on a Rocky Linux 8 minimal install host.
In order to compile BIND 9.20.01 on Rocky Linux minimal you must first install a C compiler and make.
The following dependencies must be installed.
libuv (Async I/O) libcap (capabilities) liburcu (Userspace RCU for concurrency) jemalloc (Efficient memory allocator from FreeBSD project) libxml2 (XML Stats Channel) libnghttp2 (To support DoH) json-c (JSON stat interface) lmdb (in memory datastore) protobuf-c (to support DNSTAP) fstrm-devel (to support DNSTAP) cmocka (for unit testing) Most of these libraries may be installed using package manager.</description>
      <content>&lt;h1 id=&#34;bind-new-stable-compilation&#34;&gt;Bind New Stable Compilation&lt;/h1&gt;
&lt;p&gt;In this article I will document the process of compiling the new stable ISC BIND 9.20.01 from source on a Rocky Linux 8 minimal install host.&lt;/p&gt;
&lt;p&gt;In order to compile BIND 9.20.01 on Rocky Linux minimal you must first install a C compiler and make.&lt;/p&gt;
&lt;p&gt;The following dependencies must be installed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libuv (Async I/O)&lt;/li&gt;
&lt;li&gt;libcap (capabilities)&lt;/li&gt;
&lt;li&gt;liburcu (Userspace RCU for concurrency)&lt;/li&gt;
&lt;li&gt;jemalloc (Efficient memory allocator from FreeBSD project)&lt;/li&gt;
&lt;li&gt;libxml2 (XML Stats Channel)&lt;/li&gt;
&lt;li&gt;libnghttp2 (To support DoH)&lt;/li&gt;
&lt;li&gt;json-c (JSON stat interface)&lt;/li&gt;
&lt;li&gt;lmdb (in memory datastore)&lt;/li&gt;
&lt;li&gt;protobuf-c (to support DNSTAP)&lt;/li&gt;
&lt;li&gt;fstrm-devel (to support DNSTAP)&lt;/li&gt;
&lt;li&gt;cmocka  (for unit testing)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these libraries may be installed using package manager.  Some of these may need to be compiled from source.&lt;/p&gt;
&lt;h4 id=&#34;1-get-bind-source-code&#34;&gt;1. Get BIND source code&lt;/h4&gt;
&lt;p&gt;To get the new stable BIND source code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl https://downloads.isc.org/isc/bind9/9.20.1/bind-9.20.1.tar.xz -o bind-9.20.1.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-install-gcc-and-gnuautotools&#34;&gt;2. Install gcc and GNU/Autotools&lt;/h4&gt;
&lt;p&gt;To install the GCC compiler and GNU/Autotools is possible to install each utility one by one.  However it will be tedius and error/time prone.  To install these dependencies install development package group for Redhat.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install gcc gcc-c++ make bzip2 tar perl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3-enable-devel-repo-and-epel-repo&#34;&gt;3. Enable devel repo and epel repo&lt;/h4&gt;
&lt;p&gt;To compile BIND you will need many devel packages.  To install these packages you will need access to the devel repo.
To enable devel repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf config-manager --enable devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install epel-release
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;4-installing-liburcu&#34;&gt;4. Installing liburcu&lt;/h4&gt;
&lt;p&gt;The liburcu library provides RCU functionality in user space.  RCU is used by BIND to achieve thread concurrency.  RCU functionality is implemented in the Linux kernel but bind uses a user space implementation.&lt;/p&gt;
&lt;p&gt;If you want to learn more about RCU check this link:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/262464/&#34;&gt;What is RCU, Fundamentally?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To install librcu on Rocky 8 for the purposes of compiling BIND you will have to download and install from source.&lt;/p&gt;
&lt;p&gt;Install URCU development files&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install userspace-rcu-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;5-installing-libuv&#34;&gt;5. Installing libuv&lt;/h4&gt;
&lt;p&gt;The libuv library is very important in Bind since it provides the Async I/O capabilities that enable it to answer queries in parallel.&lt;/p&gt;
&lt;p&gt;To install the libuv library in Rocky Linux 8 you can use packages or from source.&lt;/p&gt;
&lt;p&gt;To install package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install libuv-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;6-install-libnghttp2&#34;&gt;6. Install libnghttp2&lt;/h4&gt;
&lt;p&gt;In order to support DoH, BIND will require development files from libnghttp2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install libnghttp2-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;7-install-openssl-libraries&#34;&gt;7. Install OpenSSL libraries&lt;/h4&gt;
&lt;p&gt;In order for BIND to support SSL you must install SSL library development files.
The following package will provide them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install openssl-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;8-install-lmdb-libraries&#34;&gt;8. Install LMDB libraries&lt;/h4&gt;
&lt;p&gt;LMDB provides a fast in memory database for BIND to use. To use this library you must
install the following package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install lmdb-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;9-install-libxml2-libraries&#34;&gt;9. Install libxml2 libraries&lt;/h4&gt;
&lt;p&gt;BIND is able to send statistics channel via XML.  To do this it requires libxml2 libraries.
You may install libxml2 libraries on Rocky 8 as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install libxml2-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;10-install-json-c-libraries&#34;&gt;10. Install json-c libraries&lt;/h4&gt;
&lt;p&gt;BIND is also able to provide statistics via JSON format.  It will require the json-c libraries.
To install use the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install json-c-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;11-install-kernel-capabilities-library&#34;&gt;11. Install kernel capabilities library.&lt;/h4&gt;
&lt;p&gt;BIND requests kernel capabilities in order to operate securely.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install libcap-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;12-install-frame-streaming-library-fstrm-and-protobuf&#34;&gt;12. Install frame streaming library (fstrm) and protobuf&lt;/h4&gt;
&lt;p&gt;BIND supports dnstap.  To support this it requires frame streaming library and google&amp;rsquo;s protocol buffers
To install use the command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install fstrm-devel protobuf-c-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;13-install-cmocka-test-library&#34;&gt;13. Install cmocka test library&lt;/h4&gt;
&lt;p&gt;To install cmocka mock testing library use the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install libcmocka-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;14-install-jemalloc-memory-allocator&#34;&gt;14. Install jemalloc memory allocator&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf -y install jemalloc-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;14-compile-bind&#34;&gt;14. Compile BIND&lt;/h4&gt;
&lt;p&gt;First untar source package.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar Jxvf bind-9.20.1.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Enter the project directory&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd bind-9.20.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For testing purposes I will be configuring the build as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/david/bind9201 --enable-developer --enable-warn-error --enable-dnstap --enable-singletrace --enable-querytrace --enable-full-report --with-lmdb --with-libxml2 --with-json-c --disable-fips-mode --with-libnghttp2  --enable-fixed-rrset --with-jemalloc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then make.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally install it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>My Rig</title>
      <link>https://seclinux.net/posts/myrig/</link>
      <pubDate>Wed, 30 Aug 2023 01:03:18 -0400</pubDate>
      
      <guid>https://seclinux.net/posts/myrig/</guid>
      <description>Introduction I thought I would give a brief overview of my development/learning environment. Many of my wacky experiments are going to be done on a rig I built in 2022. In 2022, I was working as a cybersec consultant and decided to build a rig that would help me with what I was working on at the time. Mostly, I was going to be running many simultaneous VMs in complex topologies and running DDoS mitigation experiments on them.</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I thought I would give a brief overview of my development/learning environment.  Many of my wacky experiments are going to be done on a rig I built in 2022. In 2022, I was working as a cybersec consultant and decided to build a rig that would help me with what I was working on at the time.  Mostly, I was going to be running many simultaneous VMs in complex topologies and running DDoS mitigation experiments on them.  I required a lot of memory and decent CPU, GPU was not a priority at the time so I didn&amp;rsquo;t get an expensive GPU.&lt;/p&gt;
&lt;h2 id=&#34;the-hardware&#34;&gt;The Hardware&lt;/h2&gt;
&lt;p&gt;I ordered the parts from many different places I will not be posting the BOM here I will be posting the inxi output of the machine.  The experiments done here can be done on any machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;symtex@hypervisor:~$ sudo inxi -b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System:    Host: hypervisor.seclinux.net Kernel: 5.15.0-79-generic x86_64 bits: &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; Console: tty &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Distro: Ubuntu 20.04.6 LTS &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Focal Fossa&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Machine:   Type: Desktop Mobo: ASUSTeK model: TUF GAMING X570-PLUS &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;WI-FI&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; v: Rev X.0x serial: xxxxxxxxxxxxxxx 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           BIOS: American Megatrends v: &lt;span style=&#34;color:#ae81ff&#34;&gt;4204&lt;/span&gt; date: 02/25/2022 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CPU:       16-Core: AMD Ryzen &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; 5950X type: MT MCP speed: &lt;span style=&#34;color:#ae81ff&#34;&gt;2199&lt;/span&gt; MHz min/max: 2200/3400 MHz 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Graphics:  Device-1: NVIDIA GK208B &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;GeForce GT 730&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; driver: nvidia v: 470.199.02 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Display: server: X.org 1.20.13 driver: nvidia unloaded: fbdev,modesetting,nouveau,vesa tty: 140x34 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Message: Advanced graphics data unavailable in console &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; root. 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Network:   Device-1: Intel Wireless-AC &lt;span style=&#34;color:#ae81ff&#34;&gt;9260&lt;/span&gt; driver: iwlwifi 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Device-2: Realtek RTL8111/8168/8411 PCI Express Gigabit Ethernet driver: r8169 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Drives:    Local Storage: total: 2.27 TiB used: 223.63 GiB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;9.6%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Info:      Processes: &lt;span style=&#34;color:#ae81ff&#34;&gt;428&lt;/span&gt; Uptime: 1h 43m Memory: 125.70 GiB used: 1.04 GiB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.8%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Init: systemd runlevel: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; Shell: bash 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           inxi: 3.0.38 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-software&#34;&gt;The software&lt;/h2&gt;
&lt;p&gt;I decided to use Ubuntu 20.04 Focal Fossa not the latest LTS 22.04.  I do this for stability reasons and availability of documentation.  In the past, I&amp;rsquo;ve used Debian as the distro of choice for my home servers/rigs but this time I wanted to use Ubuntu mate.  I decided to use Ubuntu mate because it provides a modern kernel to support modern hardware and modern graphics cards.  Ubuntu mate also has a great looking classic UI that I&amp;rsquo;ve gotten comfortable with.&lt;/p&gt;
&lt;p&gt;I connect to the rig via SSH and x2go if I need a graphical application that requires much memory/CPU (last time it was ghidra).&lt;/p&gt;
&lt;h2 id=&#34;kvm-libvirt-and-ovs&#34;&gt;KVM, libvirt, and OVS&lt;/h2&gt;
&lt;p&gt;When it comes to spinning up the necessary environments I like to use Vanilla KVM/libvirt with OpenVSwitch.  I know there are higher level abstraction tools like eve-ng, gns3, openstack, etc etc.  I prefer this setup because I feel I have manual control of all aspects of virtualization this helps me at time of debugging.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Firstpost</title>
      <link>https://seclinux.net/posts/firstpost/</link>
      <pubDate>Mon, 21 Aug 2023 22:41:54 -0400</pubDate>
      
      <guid>https://seclinux.net/posts/firstpost/</guid>
      <description>About this blog This is my first post. I decided to start this blog to share my technical findinds and general thoughts on a wide range of topics. I&amp;rsquo;m hoping the technical content found on this page can perhaps help someone out there who is looking for answers. The topics discussed in this blog include the following:
FOSS Computer Science IP Networking Software Development MIS/DevOps CyberSecurity Retro Computing Misc About me My name is David Farje.</description>
      <content>&lt;h2 id=&#34;about-this-blog&#34;&gt;About this blog&lt;/h2&gt;
&lt;p&gt;This is my first post.  I decided to start this blog to share my technical findinds and general thoughts on a wide range of topics. I&amp;rsquo;m hoping the technical content found on this page can perhaps help someone out there who is looking for answers. The topics discussed in this blog include the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FOSS&lt;/li&gt;
&lt;li&gt;Computer Science&lt;/li&gt;
&lt;li&gt;IP Networking&lt;/li&gt;
&lt;li&gt;Software Development&lt;/li&gt;
&lt;li&gt;MIS/DevOps&lt;/li&gt;
&lt;li&gt;CyberSecurity&lt;/li&gt;
&lt;li&gt;Retro Computing&lt;/li&gt;
&lt;li&gt;Misc&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;about-me&#34;&gt;About me&lt;/h2&gt;
&lt;p&gt;My name is David Farje. I was born in 1982. My first computer was a i386 based IBM/PC clone in 1989.  The operating system was MS-DOS, the game was called &amp;ldquo;Digger&amp;rdquo;.  My first experience coding (1993) was QBasic and simple programs in Turbo C++. In my Windows era I briefly used Visual Basic 6.0. I discovered Linux in 1997 and began the adoption process. By 2003 I was confident in all Linux system administration aspects and running it on all my machines.  In 2005 I  started working as systems administrator then turned to network engineering and cybersecurity. The whole time I was passionate about FOSS.  It was great but I always felt like I wasn&amp;rsquo;t really contributing to the development of the field.  It&amp;rsquo;s a field that has given me so much and today I would like to contribute to the FOSS movement in a meaningful way.  This blog is part of that.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
